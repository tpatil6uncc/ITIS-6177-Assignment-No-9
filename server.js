const express = require('express');
const app = express();
const port = 3000;
const Sequelize = require('sequelize');


const swaggerJsdoc = require('swagger-jsdoc');
const swaggerUi = require('swagger-ui-express');
const cors = require('cors');
const axios = require('axios');

const { check, validationResult } = require('express-validator');

const options = {
    swaggerDefinition :{
        info:{
            title: 'Tejas ITIS-Week05',
            version: '1.0.0',
            description: 'API autogenerated by'
        },
        host: '147.182.218.164:3000',
        basePath: '/',
    },
    apis: ['./server.js'],
}

const specs = swaggerJsdoc(options);

app.use('/docs', swaggerUi.serve, swaggerUi.setup(specs));      
app.use(cors());



app.get('/say',(req,res)=>{

    const greeting=req.query.keyword;
 
    const query='https://fbr0e1w7jj.execute-api.us-east-2.amazonaws.com/dev/helloworld?keyword='+greeting;
    axios.get(query)
    .then(data => res.send(data.data))
    .catch(err => console.log(err));
 
   // res.send("Saumitra says "+greeting);
 
 });



let bodyParser = require('body-parser');
let multer = require('multer');
let upload = multer();

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

const mariadb = require('mariadb');
const pool = mariadb.createPool({
        host: 'localhost',
        user: 'root',
        password: 'root',
        database: 'sample',
        port: 3306,
        connectionLimit: 5
});








/**
 * @swagger
 * /api/agent:
 *  put:
 *    summary: insert agent
 *    description: updates or inserts agents
 *    consumes:
 *    - application/json
 *    produces:
 *    - application/json
 *    parameters:
 *    - in: body
 *      name: agentCode
 *      required: true
 *      schema:
 *        type: string
 *        $ref: "#/definitions/agentPut"
 *    requestBody:
 *      request: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: "#definitions/agentPut"
 *    responses:
 *      200:
 *       description: A successfull response from agents
 * definitions:
 *   agentPut:
 *     type: object
 *     required:
 *     - agentCode
 *     - agentName
 *     - workingArea
 *     - commission
 *     - phoneNo
 *     - country
 *     properties:
 *       agentCode:
 *         type: string
 *         example: AA100
 *       agentName:
 *         type: string
 *         example: Tejas
 *       workingArea:
 *         type: string
 *         example: NC
 *       commission:
 *         type: decimal
 *         example: 0.40
 *       phoneNo:
 *         type: string
 *         example: 12367529
 *       country:
 *         type: string
*/
app.put('/api/agent',(request,response) =>{
    pool.query(`update sample.agents set agent_name = '${request['body'].agentName}',  working_area = '${request['body'].workingArea}', commission  = '${request['body'].commission}', phone_no = '${request['body'].phoneNo}', country = '${request['body'].country}' where agent_code = '${request['body'].agentCode}'`).then(res => {
                console.log(res.affectedRows);
                if(res.affectedRows > 0)
                {
                        response.statusCode = 200;
                        response.setHeader('Content-Type','Application/json');
                        response.send("Updated Successfully");
                }
                else{
                    pool.query(`insert into sample.agents values('${request['body'].agentCode}', '${request['body'].agentName}', '${request['body'].workingArea}', '${request['body'].commission}', '${request['body'].phoneNo}', '${request['body'].country}')`).then(res1 => {
                        if(res1.affectedRows > 0)
                        {
                            response.statusCode = 200;
                            response.setHeader('Content-Type','Application/json');
                            response.send("Record was not found, inserting in the database");
                        }
                        else{
                            response.statusCode = 201;
                            response.setHeader('Content-Type','text/plain');
                            response.send("The agent is not located in the table - Operation  unsuccessful");
                        }
                    })
                    .catch(err =>{
                        response.statusCode = 500;
                        console.error('Error executing query', err.stack);
                        response.setHeader('Content-Type','text/plain');
                        response.send('Error executing query' + err.stack.toString());
                    });
                }
              })
        .catch(err =>{
                response.statusCode = 404;
                console.error('Error executing query', err.stack);
                response.setHeader('Content-Type','text/plain');
                response.send('Error executing query' + err.stack);
        });
});

/**
 * @swagger
 * /api/students:
 *     get:
 *       description : Return all students
 *       produces:
 *           - application/json
 *       responses:
 *           200:
 *               description : Object containing array of students objects
 */
// to get all students records
app.get('/api/students', async(req,res)=>{
    let conn;
     try {
         const conn = await pool.getConnection();
         const rows = await conn.query('SELECT * FROM student');
         conn.end();
         const jsonData = JSON.stringify(rows);
         res.send(jsonData);
     } catch (err) {
         console.log(err);
         res.send({ error: 'An error occurred while retrieving data from the database' });
     } finally {
         if (conn) return conn.end();
     }
 });

 // to get all studentreport records
app.get('/api/studentsreport/:id', async(req,res)=>{
    let conn;
     try {
         const conn = await pool.getConnection();
         const rows = await conn.query('SELECT * FROM studentreport where rollid = ?',[req.params.id]);
         conn.end();
         const jsonData = JSON.stringify(rows);
         res.send(jsonData);
     } catch (err) {
         console.log(err);
         res.send({ error: 'An error occurred while retrieving data from the database' });
     } finally {
         if (conn) return conn.end();
     }
 });

 /**
 * @swagger
 * /api/agents:
 *     get:
 *       description : Return all agents
 *       produces:
 *           - application/json
 *       responses:
 *           200:
 *               description : Object containing array of agent objects
 */


// to get all agents
app.get('/api/agents', async(req,res)=>{
    let conn;
     try {
         const conn = await pool.getConnection();
         const rows = await conn.query('SELECT * FROM agents');
         conn.end();
         const jsonData = JSON.stringify(rows);
         res.send(jsonData);
     } catch (err) {
         console.log(err);
         res.send({ error: 'An error occurred while retrieving data from the database' });
     } finally {
         if (conn) return conn.end();
     }
 });


 /**
 * @swagger
 * /api/company:
 *   post:
 *     summary: Update a company record for a given company name
 *     description: This API call allows you to update city for company
 *     consumes:
 *       - application/x-www-form-urlencoded
 *     parameters:
 *       - name: company
 *         description: The roll id of student
 *         in: formData
 *         required: true
 *         type: string
 *       - name: city
 *         description: Section value to be updated
 *         in: formData
 *         required: true
 *         type: string
 *     responses:
 *       '201':
 *         description: Item created successfully
 *       '400':
 *         description: Invalid input provided
 *       '500':
 *         description: Internal server error
 */

 app.post('/api/company',upload.array(), async (req, res) => {
    try {
        const conn = await pool.getConnection();
        const data = req.body;
        console.log(data);
        await conn.query('update company set company_city=? WHERE company_name = ?', [data.city,data.company]);
        conn.end();
        res.send("Updated successfully");

    } catch (error) {
        console.error(error);
        res.send({ error: 'Failed to retrieve records' });
    }
});

/**
 * @swagger
 *
 * /api/agent:
 *   delete:
 *     summary: Delete an item
 *     description: Deletes the item with the specified ID
 *     tags:
 *       - Example
 *     parameters:
 *       - name: value
 *         in: formData
 *         description: The ID of the item to delete
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       content:
 *         application/x-www-form-urlencoded:
 *           schema:
 *             type: object
 *             properties:
 *               input:
 *                 type: string
 *                 description: The input value to delete
 *                 required: true
 *     responses:
 *       204:
 *         description: No content
 *       404:
 *         description: Item not found
 */
app.delete('/api/agent', async (req, res) => {
    try {
        const conn = await pool.getConnection();
        const data = req.body;
        console.log(data);
        const result = await conn.query('delete FROM agents WHERE AGENT_CODE = ?', [data.value]);
        conn.end();
        if(result.affectedRows>0){
                res.send("Deletion success");
        }
        else{
                res.send({ error: 'Failed to retrieve records' });
        }

    } catch (error) {
        console.error(error);
        res.send({ error: 'Failed to retrieve records' });
    }
});

/**
 * @swagger
 * /api/agent:
 *   patch:
 *     summary: Update agent commission
 *     description: This API call allows you to update a commission to 0.80 for given agent id.
 *     consumes:
 *       - application/x-www-form-urlencoded
 *     parameters:
 *       - name: value
 *         in: formData
 *         type: string
 *         description: Agent id value.
 *         required: true
 *     responses:
 *       '200':
 *         description: Agent updated successfully
 *       '400':
 *         description: Invalid input provided
 *       '404':
 *         description: User not found
 *       '500':
 *         description: Internal server error
 *
 */

app.patch('/api/agent',upload.array(), async (req, res) => {
    try {
        const conn = await pool.getConnection();
        const data = req.body;
        console.log(data);
        const rows = await conn.query('update agents set commission = 0.80  WHERE agent_code = ?', [data.value]);
        conn.end();
        res.send("Success");
    } catch (error) {
        console.error(error);
        res.send({ error: 'Failed to retrieve records' });
    }
});


/**
 * @swagger
 * /api/foods:
 *     get:
 *       description : Return all foods
 *       produces:
 *           - application/json
 *       responses:
 *           200:
 *               description : Object containing array of foods objects
 */

app.get('/api/foods', async(req,res)=>{
    let conn;
     try {
         const conn = await pool.getConnection();
         const rows = await conn.query('SELECT * FROM foods');
         conn.end();
         const jsonData = JSON.stringify(rows);
         res.send(jsonData);
     } catch (err) {
         console.log(err);
         res.send({ error: 'An error occurred while retrieving data from the database' });
     } finally {
         if (conn) return conn.end();
     }
 });


/**
 * @swagger
 * /api/foods:
 *  put:
 *    description: updates or inserts foods
 *    consumes:
 *    - application/json
 *    produces:
 *    - application/json
 *    parameters:
 *    - in: body
 *      name: itemId
 *      required: true
 *      schema:
 *        type: string
 *        $ref: "#/definitions/foodsPut"
 *    requestBody:
 *      request: true
 *      content:
 *        application/json:
 *          schema:
 *            $ref: "#definitions/foodsPut"
 *    responses:
 *      200:
 *       description: A successfull response from agents
 * definitions:
 *   foodsPut:
 *     type: object
 *     required:
 *     - itemId
 *     - itemName
 *     - itemUnit
 *     - companyId
 *     properties:
 *       itemId:
 *         type: string
 *         example: 9
 *       itemName:
 *         type: string
 *         example: Pringles
 *       itemUnit:
 *         type: string
 *         example: Pcs
 *       companyId:
 *         type: string
 *         example: 18
*/
app.put('/api/foods', (request, response) => {
    pool.query(`update sample.foods set item_name = '${request['body'].itemName}',  item_unit = '${request['body'].itemUnit}', company_id  = '${request['body'].companyId}' where item_id = '${request['body'].itemId}'`).then(res => {
        console.log("hhhhh",res.affectedRows);
        if(res.affectedRows > 0)
        {
                response.statusCode = 200;
                response.setHeader('Content-Type','Application/json');
                response.send("Updated Successfully");
        }
        else{
            pool.query(`insert into sample.foods values('${request['body'].itemId}', '${request['body'].itemName}', '${request['body'].itemUnit}', '${request['body'].companyId}')`).then(res1 => {
                if(res1.affectedRows > 0)
                {
                    response.statusCode = 200;
                    response.setHeader('Content-Type','Application/json');
                    response.send("Record was not found, inserting in the database");
                }
                else{
                    response.statusCode = 201;
                    response.setHeader('Content-Type','text/plain');
                    response.send("The agent is not located in the table - Operation  unsuccessful");
                }
            })
            .catch(err =>{
                response.statusCode = 500;
                console.error('Error executing query', err.stack);
                response.setHeader('Content-Type','text/plain');
                response.send('Error executing query' + err.stack.toString());
            });
        }
      })
.catch(err =>{
        response.statusCode = 404;
        console.error('Error executing query', err.stack);
        response.setHeader('Content-Type','text/plain');
        response.send('Error executing query' + err.stack);
});
});




/**
 * @swagger
 *
 * /api/foods:
 *   delete:
 *     summary: Delete an item
 *     description: Deletes the item with the specified ID
 *     tags:
 *       - Example
 *     parameters:
 *       - name: value
 *         in: formData
 *         description: The ID of the item to delete
 *         required: true
 *         schema:
 *           type: string
 *     requestBody:
 *       content:
 *         application/x-www-form-urlencoded:
 *           schema:
 *             type: object
 *             properties:
 *               input:
 *                 type: string
 *                 description: The input value to delete
 *                 required: true
 *     responses:
 *       204:
 *         description: No content
 *       404:
 *         description: Item not found
 */
app.delete('/api/foods', async (req, res) => {
    try {
        const conn = await pool.getConnection();
        const data = req.body;
        console.log(data);
        const result = await conn.query('delete FROM foods WHERE ITEM_ID = ?', [data.value]);
        console.log("hello", data.value);
        conn.end();
        if(result.affectedRows>0){
                res.send("Deletion success");
        }
        else{
                res.send({ error: 'Failed to retrieve records' });
        }

    } catch (error) {
        console.error(error);
        res.send({ error: 'Failed to retrieve records' });
    }
});


/**
 * @swagger
 * /api/foods:
 *   patch:
 *     summary: Update foods itemUnit
 *     description: This API call allows you to update a itemUnit to 100 for given item id.
 *     consumes:
 *       - application/x-www-form-urlencoded
 *     parameters:
 *       - name: value
 *         in: formData
 *         type: string
 *         description: Agent id value.
 *         required: true
 *     responses:
 *       '200':
 *         description: foods updated successfully
 *       '400':
 *         description: Invalid input provided
 *       '404':
 *         description: User not found
 *       '500':
 *         description: Internal server error
 *
 */

app.patch('/api/foods',upload.array(), async (req, res) => {
    try {
        const conn = await pool.getConnection();
        const data = req.body;
        console.log(data);
        const rows = await conn.query('update foods set item_unit = 100  WHERE item_id = ?', [data.value]);
        conn.end();
        res.send("Success");
    } catch (error) {
        console.error(error);
        res.send({ error: 'Failed to retrieve records' });
    }
});



// HEAD api call


app.head('/api/records', (req, res) => {
    res.sendStatus(200);
});

app.get('/',(req,res)=>{
        res.send("hi");
});



app.listen(port, ()=>{
    console.log('Example app listening at http://localhost:${port}');
});


// to get all students records
// app.get('/api/students', async(req,res)=>{
//    let conn;
//     try {
//         const conn = await pool.getConnection();
//         const rows = await conn.query('SELECT * FROM student');
//         conn.end();
//         const jsonData = JSON.stringify(rows);
//         res.send(jsonData);
//     } catch (err) {
//         console.log(err);
//         res.send({ error: 'An error occurred while retrieving data from the database' });
//     } finally {
//         if (conn) return conn.end();
//     }
// });

// app.get('/api/agent', async(req,res)=>{
//     let conn;
//      try {
//          const conn = await pool.getConnection();
//          const rows = await conn.query('SELECT * FROM agents');
//          conn.end();
//          const jsonData = JSON.stringify(rows);
//          res.send(jsonData);
//      } catch (err) {
//          console.log(err);
//          res.send({ error: 'An error occurred while retrieving data from the database' });
//      } finally {
//          if (conn) return conn.end();
//      }
//  });

// app.get('/api/foods', async(req,res)=>{
//     let conn;
//      try {
//          const conn = await pool.getConnection();
//          const rows = await conn.query('SELECT * FROM foods');
//          conn.end();
//          const jsonData = JSON.stringify(rows);
//          res.send(jsonData);
//      } catch (err) {
//          console.log(err);
//          res.send({ error: 'An error occurred while retrieving data from the database' });
//      } finally {
//          if (conn) return conn.end();
//      }
//  });


// app.get('/api/studentsreport/:id', async(req,res)=>{
//     let conn;
//      try {
//          const conn = await pool.getConnection();
//          const rows = await conn.query('SELECT * FROM studentreport where rollid = ?',[req.params.id]);
//          conn.end();
//          const jsonData = JSON.stringify(rows);
//          res.send(jsonData);
//      } catch (err) {
//          console.log(err);
//          res.send({ error: 'An error occurred while retrieving data from the database' });
//      } finally {
//          if (conn) return conn.end();
//      }
//  });
  
 
// app.head('/api/records', (req, res) => {
//     res.sendStatus(200);
// });

// app.listen(port, ()=>{
//         console.log('Example app listening at http://localhost:${port}');
// });

